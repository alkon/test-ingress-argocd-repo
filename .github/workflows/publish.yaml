name: Publish Python App & Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: self-hosted
    #    outputs: # This section is commented out, so its indentation doesn't matter much,
    #      chart-version: ${{ steps.set-version.outputs.chart-version }} # but if uncommented, ensure it aligns with 'outputs:'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #      - name: Build and Push Docker Image to Docker Hub # This block was commented out, leaving it as is.
      #        run: |
      #          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest ./app
      #          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest

      - name: Build and Push Docker Image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/hello-world:latest

      - name: Extract Chart Version
        id: chart
        run: |
          VERSION=$(grep '^version:' ./helm/hello-chart/Chart.yaml | cut -d ':' -f2 | xargs)
          echo "Chart version detected: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "$VERSION" > chart-version.txt # Added quotes around $VERSION for robustness

      # Store chart version to be used in other isolated workflow (i.e deploy)
      - name: Upload Chart Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chart-version
          path: chart-version.txt

      # Config Helm
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      # Imporatnt! Runs on Linux only (not macOs)
      # 1. Logs in to the OCI registry
      # 2. Runs helm package
      # 3. Runs helm push

      #      - name: Push Helm Chart to Docker Hub OCI # This block was commented out, leaving it as is.
      #        uses: bsord/helm-push@v4
      #        with:
      #          useOCI: true
      #          username: ${{ secrets.DOCKERHUB_USERNAME }}
      #          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #          registry-url: oci://registry-1.docker.io/${{ secrets.DOCKERHUB_USERNAME }}
      #          chart-folder: ./helm/hello-chart

      # Note: awk grabs the generated .tgz filename (last word of the Helm output)
      - name: Package & Push Helm Chart to Docker Hub OCI (auto version)
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | helm registry login registry-1.docker.io \
            --username ${{ secrets.DOCKERHUB_USERNAME }} \
            --password-stdin

          CHART_DIR="./helm/hello-chart"
          CHART_PACKAGE=$(helm package "$CHART_DIR" --destination . | awk '{print $NF}')
          helm push "$CHART_PACKAGE" "oci://registry-1.docker.io/${{ secrets.DOCKERHUB_USERNAME }}" # Added quotes around OCI URL for robustness

  deploy:
    runs-on: self-hosted
    needs: build-and-publish

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Chart Version Artifact
        uses: actions/download-artifact@v4
        with:
          name: chart-version
          path: .

      - name: Set up Kubeconfig for K3D Cluster
        run: |
          mkdir -p ~/.kube
          # Directly write the pre-configured Kubeconfig content from your GitHub Secret
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          # Set KUBECONFIG env var for all subsequent steps in this job.
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Get Argo CD Admin Password
        id: get_argocd_password
        run: |
          ARGOCD_ADMIN_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d)
          echo "argocd_password=$ARGOCD_ADMIN_PASSWORD" >> "$GITHUB_OUTPUT"
          echo "Argo CD admin password retrieved successfully."
        timeout-minutes: 1


      - name: Start ArgoCD Service Port Forward
        uses: ./.github/actions/kubectl-port-forward # Path to your custom action
        with:
          service: argocd-server
          namespace: argocd
          local-port: 8443
          remote-port: 443
          wait-for-ready: true
          timeout: 60
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }} # Ensure KUBECONFIG is passed to your action

      # --- Apply Application Manifest with kubectl ---
      - name: Apply Argo CD Application Manifest
        # Corrected indentation for 'env:' and 'run:'
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          # Read CHART_VERSION from the artifact
          CHART_VERSION=$(cat chart-version/chart_version.txt)
          echo "Detected CHART_VERSION: $CHART_VERSION"
          
          # Use sed (or envsubst if installed) to replace placeholders and create the final manifest
          # For macOS/BSD sed, you often need to provide a backup extension (e.g., '')
          sed -i '' "s|\${DOCKERHUB_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" argocd-apps/hello-chart-app.yaml.template
          sed -i '' "s|\${CHART_VERSION}|$CHART_VERSION|g" argocd-apps/hello-chart-app.yaml.template
          
          # Rename the templated file to its final name
          mv argocd-apps/hello-chart-app.yaml.template argocd-apps/hello-chart-app.yaml
          
          # Apply the Argo CD Application manifest directly to Kubernetes
          echo "Applying Argo CD Application manifest..."
          kubectl apply -f argocd-apps/hello-chart-app.yaml
          echo "Argo CD Application manifest applied successfully."    

      - name: Check Application Health (with Diagnostics)
        uses: ./.github/actions/app-health-check # Path to your new custom action
        with:
          app-name: hello-chart-app # The name of your Argo CD application
          app-namespace: hello-chart # The Kubernetes namespace where your app's resources are deployed
          wait-timeout: 90 # Timeout in seconds for the health check (adjust as needed)
          argocd-server-address: localhost:8443 # The address where Argo CD is accessible via port-forward
          argocd-username: admin # Your Argo CD admin username
          argocd-password: ${{ steps.get_argocd_password.outputs.argocd_password }} # The password retrieved from the previous step
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      # --- No separate cleanup step needed due to the custom action's 'post' hook ---