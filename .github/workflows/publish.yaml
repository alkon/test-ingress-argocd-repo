name: Publish Python App & Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  # lint: # Commented out as per your provided YAML
  #   uses: ./.github/workflows/reusable-python-job.yaml
  #   with:
  #     job-name: Lint
  #     python-version: ${{ matrix.python-version }}
  #     requirements-path: app/requirements.txt
  #     task-script: |
  #       pylint app/main.py --fail-under=7.0
  #     job-timeout-minutes: 15
  #   strategy:
  #     matrix:
  #       python-version: [ "3.12", "3.13" ]

  # test: # Commented out as per your provided YAML
  #   uses: ./.github/workflows/reusable-python-job.yaml
  #   with:
  #     job-name: Test
  #     python-version: ${{ matrix.python-version }}
  #     requirements-path: app/requirements.txt
  #     task-script: |
  #       pytest app/tests # Adjust to the correct path for tests
  #     job-timeout-minutes: 15
  #   strategy:
  #     matrix:
  #       python-version: [ "3.12", "3.13" ]

  build-and-publish:
    runs-on: self-hosted
    # needs: lint # Commented out as per your provided YAML. If you uncomment lint/test, uncomment this too.
    # needs: [lint, test] # If you uncomment both lint and test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- MODIFIED STEP: Extract Chart Metadata ---
      - name: Extract Chart Metadata
        id: chart # The 'id' is important to reference outputs
        run: |
          # Find the *first* Chart.yaml in the ./helm/ directory structure.
          # This assumes you have one main chart directory under ./helm/
          # If you have multiple charts, this needs a different strategy (e.g., matrix, explicit input)
          CHART_YAML_PATH=$(find ./helm -name Chart.yaml | head -n 1)
          
          if [ -z "$CHART_YAML_PATH" ]; then
            echo "Error: No Chart.yaml found in ./helm/ directory."
            exit 1
          fi
          
          # Extract version
          CHART_VERSION=$(grep '^version:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Chart version detected: $CHART_VERSION"
          echo "version=$CHART_VERSION" >> "$GITHUB_OUTPUT"
          echo "$CHART_VERSION" > chart-version.txt # For artifact upload
          
          # Extract name
          CHART_NAME=$(grep '^name:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Chart name detected: $CHART_NAME"
          echo "name=$CHART_NAME" >> "$GITHUB_OUTPUT" # Set chart name as an output
          
          # Extract chart directory path (e.g., ./helm/my-chart-name)
          # dirname | xargs basename extracts "my-chart-name" from "helm/my-chart-name/Chart.yaml"
          CHART_DIRECTORY=$(dirname "$CHART_YAML_PATH" | xargs basename)
          echo "Chart directory name: $CHART_DIRECTORY"
          echo "chart_directory=$CHART_DIRECTORY" >> "$GITHUB_OUTPUT" # Output the chart directory name

      # --- NEW STEP: Extract Docker Image Metadata (now using the dynamic chart name) ---
      - name: Extract Docker Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.chart.outputs.name }}
          tags: |
            type=sha,format=short
            type=raw,value=${{ steps.chart.outputs.version }},enable=${{ steps.chart.outputs.version != '' }}
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}  

      - name: Build and Push Docker Image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Store chart version to be used in other isolated workflow (i.e deploy)
      - name: Upload Chart Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chart-version
          path: chart-version.txt

      # Config Helm
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0 # This line (or the 'with:' above it) is likely line 85. It must be correctly indented.

      # --- MODIFIED STEP: Package & Push Helm Chart to Docker Hub OCI ---
      - name: Package & Push Helm Chart to Docker Hub OCI
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | helm registry login registry-1.docker.io \
            --username ${{ secrets.DOCKERHUB_USERNAME }} \
            --password-stdin

          # Use the extracted chart directory name for packaging
          CHART_DIR="./helm/${{ steps.chart.outputs.chart_directory }}" 
          
          CHART_PACKAGE=$(helm package "$CHART_DIR" --destination . | awk '{print $NF}')
          echo "Packaged chart: $CHART_PACKAGE"
          
          echo "Expected Docker Hub OCI Repository: registry-1.docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.chart.outputs.name }}"

          # Use the extracted chart name for the OCI registry path
          helm push "$CHART_PACKAGE" "oci://registry-1.docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.chart.outputs.name }}"          

  deploy:
    runs-on: self-hosted
    needs: build-and-publish

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Chart Version Artifact
        uses: actions/download-artifact@v4
        with:
          name: chart-version
          path: .

      - name: Set up Kubeconfig for K3D Cluster
        run: |
          mkdir -p ~/.kube
          # Directly write the pre-configured Kubeconfig content from your GitHub Secret
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          # Set KUBECONFIG env var for all subsequent steps in this job.
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Get Argo CD Admin Password
        id: get_argocd_password
        run: |
          ARGOCD_ADMIN_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d)
          echo "argocd_password=$ARGOCD_ADMIN_PASSWORD" >> "$GITHUB_OUTPUT"
          echo "Argo CD admin password retrieved successfully."
        timeout-minutes: 1


      - name: Start ArgoCD Service Port Forward
        uses: ./.github/actions/kubectl-port-forward # Path to your custom action
        with:
          service: argocd-server
          namespace: argocd
          local-port: 8443
          remote-port: 443
          wait-for-ready: true
          timeout: 60
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }} # Ensure KUBECONFIG is passed to your action

      # --- Apply Application Manifest with kubectl ---
      - name: Apply Argo CD Application Manifest
        # Corrected indentation for 'env:' and 'run:'
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
        run: |
          # Read CHART_VERSION from the artifact
          CHART_VERSION=$(cat chart-version.txt)
          echo "Detected CHART_VERSION: $CHART_VERSION"
          
          # Use sed (or envsubst if installed) to replace placeholders and create the final manifest
          # For macOS/BSD sed, you often need to provide a backup extension (e.g., '')
          # IMPORTANT: Make sure your argocd-apps/hello-chart-app.yaml.template file uses ${DOCKERHUB_USERNAME} and ${CHART_VERSION} placeholders.
          sed -i '' "s|\${DOCKERHUB_USERNAME}|${{ secrets.DOCKERHUB_USERNAME }}|g" argocd-apps/hello-chart-app.yaml.template
          sed -i '' "s|\${CHART_VERSION}|$CHART_VERSION|g" argocd-apps/hello-chart-app.yaml.template
          
          # Rename the templated file to its final name
          mv argocd-apps/hello-chart-app.yaml.template argocd-apps/hello-chart-app.yaml
          
          # Apply the Argo CD Application manifest directly to Kubernetes
          echo "Applying Argo CD Application manifest..."
          kubectl apply -f argocd-apps/hello-chart-app.yaml
          echo "Argo CD Application manifest applied successfully."    

      - name: Check Application Health (with Diagnostics)
        uses: ./.github/actions/app-health-check # Path to your new custom action
        with:
          app-name: hello-chart-app # The name of your Argo CD application
          app-namespace: hello-chart # The Kubernetes namespace where your app's resources are deployed
          wait-timeout: 90 # Timeout in seconds for the health check (adjust as needed)
          argocd-server-address: localhost:8443 # The address where Argo CD is accessible via port-forward
          argocd-username: admin # Your Argo CD admin username
          argocd-password: ${{ steps.get_argocd_password.outputs.argocd_password }} # The password retrieved from the previous step
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      # --- No separate cleanup step needed due to the custom action's 'post' hook ---