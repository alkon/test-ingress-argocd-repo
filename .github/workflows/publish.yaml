name: Publish Python App & Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:
  # The 'lint' and 'test' jobs are commented out as per your provided YAML.
  # Uncomment and adjust 'needs' below if you reactivate them.
  # lint:
  #   uses: ./.github/workflows/reusable-python-job.yaml
  #   with:
  #     job-name: Lint
  #     python-version: ${{ matrix.python-version }}
  #     requirements-path: app/requirements.txt
  #     task-script: |
  #       pylint app/main.py --fail-under=7.0
  #     job-timeout-minutes: 15
  #   strategy:
  #     matrix:
  #       python-version: [ "3.12", "3.13" ]

  # test:
  #   uses: ./.github/workflows/reusable-python-job.yaml
  #   with:
  #     job-name: Test
  #     python-version: ${{ matrix.python-version }}
  #     requirements-path: app/requirements.txt
  #     task-script: |
  #       pytest app/tests # Adjust to the correct path for tests
  #     job-timeout-minutes: 15
  #   strategy:
  #     matrix:
  #       python-version: [ "3.12", "3.13" ]

  build-and-publish:
    runs-on: self-hosted
    # needs: lint # Uncomment if you reactivate the lint job
    # needs: [lint, test] # Uncomment if you reactivate both lint and test

    permissions:
      contents: read
      packages: write # Crucial for pushing Helm charts (packages) to GHCR

    outputs:
      chart_name: ${{ steps.chart.outputs.name }}
      chart_version: ${{ steps.chart.outputs.version }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

#      - name: Log in to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }} # GitHub user triggered the workflow (e.g., 'alkon')
#          password: ${{ secrets.GITHUB_TOKEN }} # The auto-generated token with 'packages: write' permission

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Extract Chart Metadata
        id: chart # IMPORTANT: This ID is used to reference outputs like steps.chart.outputs.name
        run: |
          # Find the *first* Chart.yaml in the ./helm/ directory structure.
          CHART_YAML_PATH=$(find ./helm -name Chart.yaml | head -n 1)
          
          if [ -z "$CHART_YAML_PATH" ]; then
            echo "Error: No Chart.yaml found in ./helm/ directory."
            exit 1
          fi
          
          # Extract version from Chart.yaml
          CHART_VERSION=$(grep '^version:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Chart version detected: $CHART_VERSION"
          echo "version=$CHART_VERSION" >> "$GITHUB_OUTPUT" # Output for current job steps and for job output
          echo "$CHART_VERSION" > chart-version.txt # For artifact upload
          
          # Extract name from Chart.yaml
          CHART_NAME=$(grep '^name:' "$CHART_YAML_PATH" | cut -d ':' -f2 | xargs)
          echo "Chart name detected: $CHART_NAME"
          echo "name=$CHART_NAME" >> "$GITHUB_OUTPUT" # Output for current job steps and for job output
          
          # Extract chart directory path (e.g., hello-chart from helm/hello-chart/Chart.yaml)
          CHART_DIRECTORY=$(dirname "$CHART_YAML_PATH" | xargs basename)
          echo "Chart directory name: $CHART_DIRECTORY"
          echo "chart_directory=$CHART_DIRECTORY" >> "$GITHUB_OUTPUT" # Output for current job steps

      - name: Upload Chart Version Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chart-version
          path: chart-version.txt

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.0

      - name: Package & Push Helm Chart to GHCR OCI
        run: |
          CHART_DIR="./helm/${{ steps.chart.outputs.chart_directory }}" 
          CHART_PACKAGE=$(helm package "$CHART_DIR" --destination . | awk '{print $NF}')
          echo "Packaged chart: $CHART_PACKAGE"
          GHCR_OCI_TARGET="oci://ghcr.io/${{ github.repository_owner }}/${{ steps.chart.outputs.name }}"
          echo "Pushing Helm chart to GHCR OCI Repository: $GHCR_OCI_TARGET"
          helm push "$CHART_PACKAGE" "$GHCR_OCI_TARGET" --debug

  deploy:
    runs-on: self-hosted
    needs: build-and-publish # Crucial to get outputs from the 'build-and-publish' job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Chart Version Artifact
        uses: actions/download-artifact@v4
        with:
          name: chart-version
          path: .

      - name: Set up Kubeconfig for K3D Cluster
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

      - name: Get Argo CD Admin Password and Sync
        id: get_argocd_password
        run: |
          ARGOCD_ADMIN_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath='{.data.password}' | base64 -d)
          echo "argocd_password=$ARGOCD_ADMIN_PASSWORD" >> "$GITHUB_OUTPUT"
          echo "Argo CD admin password retrieved successfully."
        timeout-minutes: 1

      - name: Start ArgoCD Service Port Forward
        uses: ./.github/actions/kubectl-port-forward
        with:
          service: argocd-server
          namespace: argocd
          local-port: 8443
          remote-port: 443
          wait-for-ready: true
          timeout: 60
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      ###

      # Sub-Step 1: Prepare Argo CD Application Manifest
      # This step handles variable definition, template processing, and prints the final manifest.
      - name: Prepare Argo CD Application Manifest
        id: prepare_manifest # Add an ID to reference outputs from this step
        run: |
          # --- Define dynamic variables based on main workflow contexts ---
          CHART_VERSION=$(cat chart-version.txt) # From artifact
          CHART_NAME_FROM_BUILD_JOB="${{ needs.build-and-publish.outputs.chart_name }}"

          GHCR_HELM_OCI_FINAL_PATH="oci://ghcr.io/${{ github.repository_owner }}/${CHART_NAME_FROM_BUILD_JOB}"
          ARGOCD_APP_NAME="${CHART_NAME_FROM_BUILD_JOB}-app"
          DESTINATION_NAMESPACE="${CHART_NAME_FROM_BUILD_JOB}"
          HELM_RELEASE_NAME="${CHART_NAME_FROM_BUILD_JOB}-release"
          DOCKER_IMAGE_REPOSITORY="${{ secrets.DOCKERHUB_USERNAME }}/${CHART_NAME_FROM_BUILD_JOB}" # Ensure this is used if needed

          echo "Detected CHART_VERSION: $CHART_VERSION"
          echo "Chart name from build job: $CHART_NAME_FROM_BUILD_JOB"
          echo "GHCR Helm OCI Source URL for Argo CD: $GHCR_HELM_OCI_FINAL_PATH"
          echo "Argo CD App Name: $ARGOCD_APP_NAME"
          echo "Destination Namespace: $DESTINATION_NAMESPACE"
          echo "Helm Release Name: $HELM_RELEASE_NAME"
          echo "Docker Image Repo (for chart values): $DOCKER_IMAGE_REPOSITORY"

          # Copy the template to a temporary location for processing
          TEMP_MANIFEST_PATH="argocd-app-manifest-temp.yaml"
          cp "argocd-apps/hello-chart-app.yaml.template" "$TEMP_MANIFEST_PATH" 

          # --- SED commands to replace all placeholders in the temporary file ---
          # Note: Using sed -i.bak for macOS compatibility with an empty backup extension
          sed -i.bak "s|\${HELM_CHART_OCI_REPO_URL}|$GHCR_HELM_OCI_FINAL_PATH|g" "$TEMP_MANIFEST_PATH"
          sed -i.bak "s|\${ARGOCD_APP_NAME}|$ARGOCD_APP_NAME|g" "$TEMP_MANIFEST_PATH"
          sed -i.bak "s|\${DESTINATION_NAMESPACE}|$DESTINATION_NAMESPACE|g" "$TEMP_MANIFEST_PATH"
          sed -i.bak "s|\${HELM_RELEASE_NAME}|$HELM_RELEASE_NAME|g" "$TEMP_MANIFEST_PATH"
          sed -i.bak "s|\${CHART_NAME}|$CHART_NAME_FROM_BUILD_JOB|g" "$TEMP_MANIFEST_PATH"

          # IMPORTANT: Ensure this SED matches your template's placeholder correctly.
          # If your template is "image.repository.placeholder", use that.
          # If your template is "${DOCKER_IMAGE_REPOSITORY}", use that (escaped).
          sed -i.bak "s|image.repository.placeholder|$DOCKER_IMAGE_REPOSITORY|g" "$TEMP_MANIFEST_PATH"

          sed -i.bak "s|\${CHART_VERSION}|$CHART_VERSION|g" "$TEMP_MANIFEST_PATH"

          # Clean up backup files created by sed on macOS
          rm -f "$TEMP_MANIFEST_PATH.bak"

          echo "--- Generated Argo CD Application Manifest Content ---"
          cat "$TEMP_MANIFEST_PATH"
          echo "--- END Generated Manifest ---"

          # Pass out variables needed by subsequent steps
          echo "argo_manifest_path=$TEMP_MANIFEST_PATH" >> "$GITHUB_OUTPUT"
          echo "argocd_app_name=$ARGOCD_APP_NAME" >> "$GITHUB_OUTPUT"
          echo "chart_name_from_build_job=$CHART_NAME_FROM_BUILD_JOB" >> "$GITHUB_OUTPUT"


      # Sub-step 2: Apply Argo CD Application Manifest to Kubernetes
      # This step applies the generated manifest.
      - name: Apply Argo CD Application Manifest to Kubernetes
        run: |
          echo "Applying Argo CD Application manifest to Kubernetes..."
          kubectl apply -f ${{ steps.prepare_manifest.outputs.argo_manifest_path }}
          echo "Argo CD Application manifest applied successfully."
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }} # Ensure KUBECONFIG is set for kubectl

      # Sub-step 3: Log in to Argo CD CLI and Get Detailed App Status
      # This step logs into Argo CD and fetches more detailed status information, including events.
      - name: Get Argo CD Application Details and Events
        run: |
          # Login to Argo CD CLI first
          argocd login localhost:8443 --username admin --password ${{ steps.get_argocd_password.outputs.argocd_password }} --insecure --grpc-web

          ARGOCD_APP_NAME="${{ steps.prepare_manifest.outputs.argocd_app_name }}"

          echo "--- Argo CD Application Full Status for '$ARGOCD_APP_NAME' ---"
          argocd app get "$ARGOCD_APP_NAME" -o yaml # Output as YAML for more detail

          echo "--- Argo CD Application History for '$ARGOCD_APP_NAME' ---"
          argocd app history "$ARGOCD_APP_NAME" # Shows previous sync attempts and their states

          echo "--- Argo CD Application Events for '$ARGOCD_APP_NAME' (CRITICAL FOR DEBUGGING) ---"
          argocd app events "$ARGOCD_APP_NAME" # Shows events, including errors from repo-server

          SYNC_STATUS=$(argocd app get "$ARGOCD_APP_NAME" -o json | jq -r '.status.sync.status')
          echo "Current Argo CD application '$ARGOCD_APP_NAME' Sync Status: $SYNC_STATUS"
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }} # KUBECONFIG if argocd CLI relies on it for context

      # Sub-step 4: Conditionally Sync Argo CD Application
      # This step triggers a sync based on the observed status.
      - name: Conditionally Sync Argo CD Application
        run: |
          # Re-login to Argo CD CLI to ensure session is active
          argocd login localhost:8443 --username admin --password ${{ steps.get_argocd_password.outputs.argocd_password }} --insecure --grpc-web

          ARGOCD_APP_NAME="${{ steps.prepare_manifest.outputs.argocd_app_name }}"

          # Re-get status to ensure freshest data for conditional logic
          SYNC_STATUS=$(argocd app get "$ARGOCD_APP_NAME" -o json | jq -r '.status.sync.status')

          if [[ "$SYNC_STATUS" == "Unknown" || "$SYNC_STATUS" == "OutOfSync" ]]; then
              echo "Application is '$SYNC_STATUS'. Forcing Argo CD application sync (without refresh)."
              argocd app sync "$ARGOCD_APP_NAME" --timeout 90 
              echo "Argo CD application sync command issued."
          else
              echo "Application is '$SYNC_STATUS'. No sync needed at this time (it should auto-sync)."
          fi
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      ###

      - name: Check Application Health (with Diagnostics)
        uses: ./.github/actions/app-health-check
        with:
          app-name: "${{ needs.build-and-publish.outputs.chart_name }}-app"
          app-namespace: "${{ needs.build-and-publish.outputs.chart_name }}"
          wait-timeout: 90
          argocd-server-address: localhost:8443
          argocd-username: admin
          argocd-password: ${{ steps.get_argocd_password.outputs.argocd_password }}
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}